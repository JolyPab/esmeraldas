import streamlit as st
from langchain_openai import AzureChatOpenAI, AzureOpenAIEmbeddings
from langchain.chains import ConversationalRetrievalChain
from langchain.memory import ConversationBufferMemory
from langchain_community.vectorstores import FAISS
import json
from langchain.prompts import PromptTemplate


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Azure ===
embeddings = AzureOpenAIEmbeddings(
    api_key=st.secrets["AZURE_EMBEDDINGS_API_KEY"],
    azure_endpoint=st.secrets["AZURE_EMBEDDINGS_ENDPOINT"],
    deployment="text-embedding-ada-002",
    api_version="2023-05-15"
)


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–æ–¥–µ–ª–∏ (–∫–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è AI-—Ä–∏—ç–ª—Ç–æ—Ä—É)
system_prompt = """
Eres un asistente virtual de la municipalidad de Esmeraldas. Tu tarea es responder preguntas relacionadas con servicios p√∫blicos, tr√°mites, documentos, normativas y eventos municipales.

Tus responsabilidades:
- Responde de manera clara, formal y √∫til.
- Usa solo la informaci√≥n contenida en el contexto.
- Si no tienes informaci√≥n suficiente, sugiere consultar con un funcionario o visitar la p√°gina correspondiente.
- No inventes informaci√≥n. S√© transparente si no sabes algo.
- Ayuda a navegar los documentos oficiales y entender los procedimientos.

Historial del di√°logo:
{chat_history}

Contexto municipal:
{context}

Pregunta del ciudadano: {question}
Respuesta del asistente municipal:

"""


llm = AzureChatOpenAI(
    api_key=st.secrets["AZURE_OPENAI_API_KEY"],
    azure_endpoint=st.secrets["AZURE_OPENAI_ENDPOINT"],
    azure_deployment="gpt-4",
    api_version="2024-02-15-preview"
)


# –ó–∞–≥—Ä—É–∑–∫–∞ FAISS –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
index = FAISS.load_local("esm_faiss", embeddings, allow_dangerous_deserialization=True)


with open("esm_metadata.json", "r", encoding="utf-8") as file:
    metadata = json.load(file)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –≤ —Å–µ—Å—Å–∏–∏ Streamlit
if "memory" not in st.session_state:
    st.session_state["memory"] = ConversationBufferMemory(
        memory_key="chat_history",
        input_key="question",
        output_key="answer",
        return_messages=True
    )


template = """
Eres un asistente virtual de la municipalidad de Esmeraldas. Tu tarea es responder preguntas relacionadas con servicios p√∫blicos, tr√°mites, documentos, normativas y eventos municipales.

Tus responsabilidades:
- Responde de manera clara, formal y √∫til.
- Usa solo la informaci√≥n contenida en el contexto.
- Si no tienes informaci√≥n suficiente, sugiere consultar con un funcionario o visitar la p√°gina correspondiente.
- No inventes informaci√≥n. S√© transparente si no sabes algo.
- Ayuda a navegar los documentos oficiales y entender los procedimientos.

Historial del di√°logo:
{chat_history}

Contexto municipal:
{context}

Pregunta del ciudadano: {question}
Respuesta del asistente municipal:

"""

PROMPT = PromptTemplate(
    input_variables=["context", "chat_history", "question"],
    template=template
)



qa = ConversationalRetrievalChain.from_llm(
    llm=llm,
    retriever=index.as_retriever(search_kwargs={"k": 10}),
    memory=st.session_state["memory"],
    combine_docs_chain_kwargs={"prompt": PROMPT}
)


# –í–∏–∑—É–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å Streamlit
st.set_page_config(page_title="AI Vicko", page_icon="")


# CSS —Å—Ç–∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.markdown("""
<style>
[data-testid="stAppViewContainer"] {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    padding-bottom: 60px;
}

[data-testid="stSidebar"] {
    background-color: transparent !important;
}

div.stTextInput {
    position: fixed !important;
    bottom: 20px !important;
    left: 50% !important;
    transform: translateX(-50%) !important;
    width: 60% !important;
    background-color: #262730 !important;
    padding: 10px !important;
    border-radius: 10px !important;
    z-index: 1000;
}
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap');

        * {
            font-family: 'Inter', sans-serif !important;
        }
[data-testid="stVerticalBlock"] {
    flex-grow: 1;
    overflow-y: auto;
}
</style>
""", unsafe_allow_html=True)



# –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.sidebar.markdown("# üèñÔ∏è Vicko AI")


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–æ–≤
content_container = st.container()


# –ü–æ–ª–µ –≤–≤–æ–¥–∞
query = st.chat_input("Qu√© quieres saber?")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
if query:
    result = qa({"question": query})

    with content_container:
        st.subheader("La respuesta del asistente.:")
        st.write(result["answer"])

        # –°–∫—Ä—ã—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        with st.expander("üí¨ Historia del di√°logo"):
            for message in st.session_state["memory"].chat_memory.messages:
                role = "T√∫" if message.type == "human" else "AI"
                st.markdown(f"**{role}:** {message.content}")
